/*
 * This file is generated by jOOQ.
 */
package kiinse.plugin.thirstforwater.data.thirst.sql.database.tables;


import kiinse.plugin.thirstforwater.data.thirst.sql.database.Keys;
import kiinse.plugin.thirstforwater.data.thirst.sql.database.Public;
import kiinse.plugin.thirstforwater.data.thirst.sql.database.tables.records.PlayersRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Players extends TableImpl<PlayersRecord> {

    /**
     * The reference instance of <code>public.players</code>
     */
    public static final Players PLAYERS = new Players();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>public.players.ID</code>.
     */
    public final TableField<PlayersRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");
    /**
     * The column <code>public.players.UUID</code>.
     */
    public final TableField<PlayersRecord, java.util.UUID> UUID = createField(DSL.name("UUID"), SQLDataType.UUID.nullable(false), this, "");
    /**
     * The column <code>public.players.name</code>.
     */
    public final TableField<PlayersRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");
    /**
     * The column <code>public.players.value</code>.
     */
    public final TableField<PlayersRecord, Double> VALUE = createField(DSL.name("value"), SQLDataType.DOUBLE.nullable(false), this, "");

    private Players(Name alias, Table<PlayersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Players(Name alias, Table<PlayersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.players</code> table reference
     */
    public Players(String alias) {
        this(DSL.name(alias), PLAYERS);
    }

    /**
     * Create an aliased <code>public.players</code> table reference
     */
    public Players(Name alias) {
        this(alias, PLAYERS);
    }

    /**
     * Create a <code>public.players</code> table reference
     */
    public Players() {
        this(DSL.name("players"), null);
    }

    public <O extends Record> Players(Table<O> child, ForeignKey<O, PlayersRecord> key) {
        super(child, key, PLAYERS);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayersRecord> getRecordType() {
        return PlayersRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PlayersRecord, Integer> getIdentity() {
        return (Identity<PlayersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PlayersRecord> getPrimaryKey() {
        return Keys.PLAYERS_PKEY;
    }

    @Override
    public Players as(String alias) {
        return new Players(DSL.name(alias), this);
    }

    @Override
    public Players as(Name alias) {
        return new Players(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Players rename(String name) {
        return new Players(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Players rename(Name name) {
        return new Players(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, java.util.UUID, String, Double> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
